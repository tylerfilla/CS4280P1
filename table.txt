#
# Tyler Filla
# CS 4280
# Project 1
#

#
# What is this file?
#
# I found the most frustrating part of hand-coding the table to be assigning numbers to states. Any mistake requires
# going back to fix many cells in the table, which seems error-prone. To solve this, I started planning out the table
# in this file. Eventually, I decided to write a program to convert this file into the table, itself, automatically,
# using an easier-to-code method.
#
# The main feature of this file is the ability to refer to states by name, rather than number. Each non-empty, non-
# comment line describes one state. The first field on the line contains a human-readable name for the state. The
# second field is a comma-separated list of transitions (in the form of "CHARACTER->TARGET"). The ground state is named
# "*" (asterisk, not a wildcard). CHARACTER is allowed to be "WS" for all whitespace, "LETTERS" for letters (uppercase
# and lowercase), or "DIGITS" for digits. If TARGET is in {braces}, that denotes an accepted token.
#
# The first non-empty, non-comment line names the EOF token, which is always assigned the numeric ID 0.
#

#TOK_EOF

*                   i->i,l->l,p->p,r->r,s->s,t->t,v->v,WS->*,OTHERLETTERS->IDENTIFIER
 i                  f->if,t->it,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
  if                f->iff,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   iff              WS->{TOK_IFF},OTHERLETTERS->IDENTIFIER
  it                e->ite,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   ite              r->iter,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    iter            WS->{TOK_ITER},OTHERLETTERS->IDENTIFIER
 l                  e->le,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
  le                t->let,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   let              WS->{TOK_LET},OTHERLETTERS->IDENTIFIER
 p                  r->pr,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
  pr                i->pri,o->pro,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   pri              n->prin,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    prin            t->print,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
     print          WS->{TOK_PRINT},OTHERLETTERS->IDENTIFIER
   pro              g->prog,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    prog            r->progr,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
     progr          a->progra,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
      progra        m->program,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
       program      WS->{TOK_PROGRAM},OTHERLETTERS->IDENTIFIER
 r                  e->re,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
  re                a->rea,t->ret,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   rea              d->read,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    read            WS->{TOK_READ},OTHERLETTERS->IDENTIFIER
   ret              u->retu,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    retu            r->retur,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
     retur          n->return,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
      return        WS->{TOK_RETURN},OTHERLETTERS->IDENTIFIER
 s                  t->st,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
  st                a->sta,o->sto,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   sta              r->star,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    star            t->start,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
     start          WS->{TOK_START},OTHERLETTERS->IDENTIFIER
   sto              p->stop,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    stop            WS->{TOK_STOP},OTHERLETTERS->IDENTIFIER
 t                  h->th,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
  th                e->the,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   the              n->then,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    then            WS->{TOK_THEN},OTHERLETTERS->IDENTIFIER
 v                  a->va,o->vo,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
  va                r->var,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   var              WS->{TOK_VAR},OTHERLETTERS->IDENTIFIER
  vo                i->voi,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
   voi              d->void,WS->IDENTIFIER,OTHERLETTERS->IDENTIFIER
    void            WS->{TOK_VOID},OTHERLETTERS->IDENTIFIER
 IDENTIFIER         LETTER->IDENTIFIER,DIGIT->IDENTIFIER,WS->{TOK_IDENTIFIER}
 EQUAL              WS->{TOK_EQUAL}
 LESSTHAN           WS->{TOK_LESSTHAN}
 GREATERTHAN        WS->{TOK_GREATERTHAN}
 COLON              WS->{TOK_COLON}
 PLUS               WS->{TOK_PLUS}
 MINUS              WS->{TOK_MINUS}
 ASTERISK           WS->{TOK_ASTERISK}
 SLASH              WS->{TOK_SLASH}
 PERCENT            WS->{TOK_PERCENT}
 DOT                WS->{TOK_DOT}
 OPAREN             WS->{TOK_OPAREN}
 CPAREN             WS->{TOK_CPAREN}
 COMMA              WS->{TOK_COMMA}
 OBRACE             WS->{TOK_OBRACE}
 CBRACE             WS->{TOK_CBRACE}
 SEMICOLON          WS->{TOK_SEMICOLON}
 OBRACKET           WS->{TOK_OBRACKET}
 CBRACKET           WS->{TOK_CBRACKET}
 INTEGER            DIGIT->INTEGER,WS->{TOK_INTEGER}
